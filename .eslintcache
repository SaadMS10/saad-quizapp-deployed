[{"C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\index.tsx":"1","C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\services\\quiz_service.ts":"2","C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\App.tsx":"3","C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\Components\\QuestionCard.tsx":"4","C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\reportWebVitals.ts":"5"},{"size":500,"mtime":1609777605283,"results":"6","hashOfConfig":"7"},{"size":920,"mtime":1609849716775,"results":"8","hashOfConfig":"7"},{"size":3800,"mtime":1611577496035,"results":"9","hashOfConfig":"7"},{"size":1891,"mtime":1611063316515,"results":"10","hashOfConfig":"7"},{"size":425,"mtime":1609777605283,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"kw9t3g",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\index.tsx",[],["25","26"],"C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\services\\quiz_service.ts",[],"C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\App.tsx",[],"C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\Components\\QuestionCard.tsx",["27","28","29"],"import React, { useState } from 'react';\nimport { questionPropsType } from './../Types/quiz_types'\n\nconst QuestionCard: React.FC<questionPropsType> = ({ question, option, callback ,num,steps,colorr}) => {\n\n    let [selectedAns, setSelectedAns] = useState(\"\");\n    let [correct,setcorrect]=useState(false)\n\n    const handleSelection = (ev: any) => {\n        setSelectedAns(ev.target.value);\n        if(colorr==selectedAns){\n            setcorrect(true)\n        }\n    }\n\n    return (\n        <div className=\"question-container\">\n            <div className=\"question\">\n            <h4>{\"QUESTION \" + (steps+1) +\"/\" + num}</h4>\n                <h2>{question}</h2>\n            \n            </div>\n\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, selectedAns)}\n                className=\"question-form\"\n                >\n                {\n                    option.map((opt: string, ind: number) => {\n                      \n                        return (\n                            <div key={ind}>\n                                <label className=\"radio\">\n                                    <input type=\"radio\"\n                                       name=\"question\"\n                                       required\n                                       checked={selectedAns === opt}\n                                       onChange={handleSelection}\n                                       value={opt}\n\n\n                                    />\n                                    {opt}\n                                   \n                                </label>\n                            </div>\n                        )\n                    })\n                }\n\n             \n                <input  type=\"submit\" className=\"submit\" value={!((steps+1)==num ) ? \"NEXTQUESTION\" : \"SUBMIT\"}/>\n            </form>\n        </div>\n    )\n}\n\nexport default QuestionCard;","C:\\Users\\SAAD\\Documents\\GitHub\\saad-quizapp\\src\\reportWebVitals.ts",[],["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":7,"column":10,"nodeType":"38","messageId":"39","endLine":7,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":11,"column":18,"nodeType":"42","messageId":"43","endLine":11,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":51,"column":76,"nodeType":"42","messageId":"43","endLine":51,"endColumn":78},{"ruleId":"32","replacedBy":"44"},{"ruleId":"34","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"@typescript-eslint/no-unused-vars","'correct' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["46"],["47"],"no-global-assign","no-unsafe-negation"]